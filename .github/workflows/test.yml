name: Tests

on:
  push:
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'templates/**'
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'templates/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose

  golang:
    name: Go
    needs: unit-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Restore cached build
        uses: actions/cache/restore@v3
        with:
          path: |
            target
            ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Generate Go code
        run: |
          cargo run convert \
            -i tests/data/model.md \
            -o tests/envs/go/generated.go \
            -t golang

      - name: Build Docker image
        run: docker build -t gotests -f tests/envs/go/Dockerfile .
      - name: Run tests
        run: docker run --rm gotests

  python:
    name: Python
    needs: unit-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Generate Python code
        run: |
          cargo run convert \
            -i tests/data/model.md \
            -o tests/envs/python/gen_dataclasses.py \
            -t python-dataclass

          cargo run convert \
            -i tests/data/model.md \
            -o tests/envs/python/gen_pydantic.py \
            -t python-pydantic

          cargo run convert \
            -i tests/data/model.md \
            -o tests/envs/python/gen_pydantic_xml.py \
            -t python-pydantic-xml

      - name: Build Docker image
        run: docker build -t pythontests -f tests/envs/python/Dockerfile .
      - name: Run tests
        run: docker run --rm pythontests

  typescript:
    name: TypeScript Zod
    needs: unit-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Generate TypeScript code
        run: |
          cargo run convert \
            -i tests/data/model.md \
            -o tests/envs/typescript/generated.ts \
            -t typescript-zod

      - name: Build Docker image
        run: docker build -t tstests -f tests/envs/typescript/Dockerfile .
      - name: Run tests
        run: docker run --rm tstests

  rust:
    name: Rust
    needs: unit-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Generate Rust code
        run: |
          cargo run convert \
            -i tests/data/model.md \
            -o tests/envs/rust/src/generated.rs \
            -t rust

      - name: Build Docker image
        run: docker build -t rusttests -f tests/envs/rust/Dockerfile .
      - name: Run tests
        run: docker run --rm rusttests
