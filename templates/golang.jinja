{# ============================================================================ #}
{# Global Macros for Type Handling                                               #}
{# ============================================================================ #}

{# Determines if a field should be an array type #}
{% macro is_multiple(attr) %}
    {%- if attr.multiple -%}[]{% endif -%}
{% endmacro %}

{# Determines if a type should be a pointer (when it references itself) #}
{% macro is_self(attr, parent_name) %}
    {%- if attr.dtypes[0] == parent_name -%}*{%- endif -%}
{% endmacro %}

{# Converts schema type to Go type #}
{% macro convert_basic_type(dtype) %}
    {%- if dtype == "string" -%}
        string
    {%- elif dtype in ["float", "number"] -%}
        float64
    {%- elif dtype == "integer" -%}
        int64
    {%- elif dtype == "boolean" -%}
        bool
    {%- else -%}
        {{ dtype }}
    {%- endif -%}
{% endmacro %}

{# Determines the Go type for an attribute #}
{% macro get_type(attr, parent_name) %}
    {%- if attr.dtypes | length > 1 -%}
        {{ parent_name }}{{ attr.name | capitalize }}Type
    {%- elif attr.dtypes[0] in object_names -%}
        {{ attr.dtypes[0] }}
    {%- else -%}
        {{ convert_basic_type(attr.dtypes[0]) }}
    {%- endif -%}
{% endmacro %}

{# Wraps type with array notation if needed #}
{% macro wrap_type(attr, parent_name) %}
    {%- if attr.multiple -%}
        []{{ is_self(attr, parent_name) }}{{ get_type(attr, parent_name) }}
    {%- else -%}
        {{ is_self(attr, parent_name) }}{{ get_type(attr, parent_name) }}
    {%- endif -%}
{% endmacro %}

{# ============================================================================ #}
{# JSON/XML/GORM Tag Generation Macros                                                #}
{# ============================================================================ #}

{# Generates JSON tag for a field #}
{% macro json_tag(attr) %}
    {{- attr.name -}}
    {%- if attr.required is false -%},omitempty{%- endif -%}
{% endmacro %}

{# Generates XML tag for a field #}
{% macro xml_tag(attr) %}
    {%- if attr.xml.wrapped -%}
        {{- attr.xml.wrapped | join('>') -}}>
    {%- endif -%}
    {%- if attr.xml.name -%}
        {{- attr.xml.name -}}
    {%- else -%}
        {{- attr.name -}}
    {%- endif -%}
    {%- if attr.xml.is_attr -%},attr{%- endif -%}
    {%- if attr.required is false -%},omitempty{%- endif -%}
{% endmacro %}

{# Generates GORM tag for a field if needed #}
{% macro gorm_tag(attr, parent_name) %}
    {%- if attr.multiple and attr.dtypes[0] in object_names -%}
        gorm:"many2many:{{ parent_name | lower }}_{{ attr.name }};"
    {%- else -%}
    {%- for option in attr.options -%}
        {%- if option.key == "pk" -%}
            gorm:"primaryKey"
        {%- endif -%}
    {%- endfor -%}
    {%- endif -%}
{% endmacro %}

{# Add ID field if no PK exists #}
{% macro add_id_field(object) %}
    {%- if object.name not in pk_objects %}
        ID *uint `json:"id,omitempty" xml:"id,attr,omitempty" gorm:"primaryKey,autoIncrement"`
    {%- endif -%}
{% endmacro %}

{# Generates GORM many2many tag if needed #}
{% macro many2many_tag(attr, parent_name) %}
    {%- if attr.multiple and attr.dtypes[0] in object_names -%}
        gorm:"many2many:{{ parent_name | lower }}_{{ attr.name }};"
    {%- endif -%}
{% endmacro %}



{# ============================================================================ #}
{# Union Type Generation Macros                                                  #}
{# ============================================================================ #}

{# Generates a field for union type struct #}
{% macro union_type_field(dtype) %}
    {%- if dtype in object_names -%}
        Object {{ dtype }}
    {%- else -%}
        {{ dtype | capitalize }} {{ convert_basic_type(dtype) }}
    {%- endif -%}
{% endmacro %}

// Package {% if title -%}{{ title | lower }}{% else %}model{% endif %} contains Go struct definitions with JSON serialization.
//
// WARNING: This is an auto-generated file.
// Do not edit directly - any changes will be overwritten.

package {% if title -%}{{ title | replace_lower(" ", "_") }}{% else %}model{% endif %}

import (
	"encoding/json"
	"fmt"
)
{%- set has_multiple_types = false -%}
{% for object in objects -%}
    {% for attr in object.attributes -%}
        {% if attr.dtypes | length > 1 -%}
            {% set has_multiple_types = true -%}
        {% endif -%}
    {% endfor -%}
{% endfor -%}

{% if has_multiple_types %}
import (
    "encoding/json"
    "fmt"
)
{% endif %}

//
// Type definitions
//
{% for object in objects %}
// {{ object.name }}
{%- if object.docstring %}
//
// {{ wrap(object.docstring, 80, "", "// ", None) }}
{%- endif %}
type {{ object.name }} struct {
    {{- add_id_field(object) }}
    {%- for attr in object.attributes %}
        {{ attr.name | pascal_case }} {{ wrap_type(attr, object.name) }} `json:"{{ json_tag(attr) }}" xml:"{{ xml_tag(attr) }}" {{ gorm_tag(attr, object.name) }}`
    {%- endfor %}
}
{% endfor %}

{%- if enums | length > 0 %}
//
// Enum definitions
//
{%- for enum in enums %}

{%- if enum.docstring %}
    // {{ enum.name }} {{ wrap(enum.docstring, 70, "", "    // ", None) }}
{%- endif %}
type {{ enum.name }} string

const (
    {%- for key, value in enum.mappings | dictsort %}
    {{ key }} {{ enum.name }} = "{{ value }}"
    {%- endfor %}
)
{%- endfor %}
{%- endif %}

{%- for object in objects %}
{%- for attr in object.attributes %}
    {%- if attr.dtypes | length > 1 %}

// {{ object.name }}{{ attr.name | capitalize }}Type represents a union type that can hold any of the following types:
{%- for dtype in attr.dtypes %}
// - {{ dtype }}
{%- endfor %}
type {{ object.name }}{{ attr.name | capitalize }}Type struct {
    {%- for dtype in attr.dtypes %}
        {%- if dtype in object_names %}
    Object {{ dtype }}
        {%- elif dtype == "string" %}
    String string
        {%- elif dtype == "float" %}
    Float float64
        {%- elif dtype == "integer" %}
    Integer int64
        {%- elif dtype == "boolean" %}
    Boolean bool
        {%- else %}
    {{ dtype | capitalize }} {{ dtype }}
        {%- endif %}
    {%- endfor %}
}

// UnmarshalJSON implements custom JSON unmarshaling for {{ object.name }}{{ attr.name | capitalize }}Type
func (t *{{ object.name }}{{ attr.name | capitalize }}Type) UnmarshalJSON(data []byte) error {
    // Reset existing values
    {%- for dtype in attr.dtypes %}
        {%- if dtype in object_names %}
    t.Object = {{ dtype }}{}
        {%- elif dtype == "string" %}
    t.String = ""
        {%- elif dtype == "float" %}
    t.Float = 0
        {%- elif dtype == "integer" %}
    t.Integer = 0
        {%- elif dtype == "boolean" %}
    t.Boolean = false
        {%- else %}
    t.{{ dtype | capitalize }} = {{ dtype }}{}
        {%- endif %}
    {%- endfor %}

    {%- for dtype in attr.dtypes %}
        {%- if dtype in object_names %}
    var objectValue {{ dtype }}
    if err := json.Unmarshal(data, &objectValue); err == nil {
        t.Object = objectValue
        return nil
    }
        {%- elif dtype == "string" %}
    var stringValue string
    if err := json.Unmarshal(data, &stringValue); err == nil {
        t.String = stringValue
        return nil
    }
        {%- elif dtype == "float" %}
    var floatValue float64
    if err := json.Unmarshal(data, &floatValue); err == nil {
        t.Float = floatValue
        return nil
    }
        {%- elif dtype == "integer" %}
    var intValue int64
    if err := json.Unmarshal(data, &intValue); err == nil {
        t.Integer = intValue
        return nil
    }
        {%- elif dtype == "boolean" %}
    var boolValue bool
    if err := json.Unmarshal(data, &boolValue); err == nil {
        t.Boolean = boolValue
        return nil
    }
        {%- else %}
    var value {{ dtype }}
    if err := json.Unmarshal(data, &value); err == nil {
        t.{{ dtype | capitalize }} = value
        return nil
    }
        {%- endif %}
    {%- endfor %}
    return fmt.Errorf("{{ object.name }}{{ attr.name | capitalize }}Type: data is neither {{ attr.dtypes | join(', ') }}")
}

// MarshalJSON implements custom JSON marshaling for {{ object.name }}{{ attr.name | capitalize }}Type
func (t {{ object.name }}{{ attr.name | capitalize }}Type) MarshalJSON() ([]byte, error) {
    {%- for dtype in attr.dtypes %}
        {%- if dtype in object_names %}
    if t.Object != ({{ dtype }}{}) {
        return json.Marshal(t.Object)
    }
        {%- elif dtype == "string" %}
    if t.String != "" {
        return json.Marshal(t.String)
    }
        {%- elif dtype == "float" %}
    if t.Float != 0 {
        return json.Marshal(t.Float)
    }
        {%- elif dtype == "integer" %}
    if t.Integer != 0 {
        return json.Marshal(t.Integer)
    }
        {%- elif dtype == "boolean" %}
    if t.Boolean {
        return json.Marshal(t.Boolean)
    }
        {%- else %}
    if t.{{ dtype | capitalize }} != ({{ dtype }}{}) {
        return json.Marshal(t.{{ dtype | capitalize }})
    }
        {%- endif %}
    {%- endfor %}
    return []byte("null"), nil
}
    {%- endif %}
    {%- endfor %}
{%- endfor %}