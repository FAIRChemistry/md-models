{# ============================================================================ #}
{# Global Macros for Type Handling                                               #}
{# ============================================================================ #}

{# Determines if a type should be wrapped in Vec<...> for multiple values #}
{% macro is_multiple(attr) %}
    {%- if attr.multiple -%}Vec<{%- endif -%}
{% endmacro %}

{# Closes the Vec<...> wrapper if needed #}
{% macro is_multiple_end(attr) %}
    {%- if attr.multiple  -%}>{%- endif -%}
{% endmacro %}

{# Converts schema type to Rust type #}
{% macro convert_basic_type(dtype) %}
    {%- if dtype == "string" -%}
        String
    {%- elif dtype == "float" -%}
        f64
    {%- elif dtype == "integer" -%}
        i64
    {%- elif dtype == "boolean" -%}
        bool
    {%- else -%}
        {{ dtype }}
    {%- endif -%}
{% endmacro %}

{# Determines the appropriate Rust type based on attribute properties #}
{% macro get_type(attr, parent_name, object_names, wrap_index) %}
    {%- if attr.xml.wrapped and attr.multiple and attr.dtypes[0] in object_names and wrap_index is not none -%}
        {{ attr.xml.wrapped[wrap_index] | cap_first }}
    {%- elif attr.dtypes | length > 1 -%}
        {{ parent_name }}{{ attr.name | capitalize }}Type
    {%- elif attr.dtypes[0] in object_names -%}
        {{ attr.dtypes[0] }}
    {%- else -%}
        {{ convert_basic_type(attr.dtypes[0]) }}
    {%- endif -%}
{% endmacro %}

{# Wraps types in Option<...> if they're optional and handles multiple values #}
{% macro wrap_type(attr, parent_name, object_names, wrap_index) %}
    {%- if attr.required is false and not attr.multiple -%}
        Option<{{ get_type(attr, parent_name, object_names, wrap_index) }}>
    {%- else -%}
        {{ is_multiple(attr) }}{{ get_type(attr, parent_name, object_names, wrap_index) }}{{ is_multiple_end(attr) }}
    {%- endif -%}
{% endmacro %}

{# Adds builder attribute for handling multiple values in derive_builder #}
{% macro array_builder_setter(attr) %}
    {%- if attr.multiple -%}
    #[builder(setter(into, each(name = "to_{{ attr.name }}")))]
    {%- endif -%}
{% endmacro %}

{# to_string for string types #}
{% macro to_string(attr) %}
    {%- if attr.dtypes[0] == "string" -%}
        .to_string()
    {%- endif -%}
{% endmacro %}

{# Determines the appropriate builder attribute for a field #}
{% macro get_builder_attribute(attr) %}
    {%- if attr.multiple -%}
        #[builder(default, setter(into, each(name = "to_{{ attr.name }}")))]
    {%- else -%}
        {%- if attr.dtypes | length > 1 -%}
            #[builder(default, setter(into))]
        {%- elif attr.default -%}
            #[builder(default = "{{ attr.default }}{{- to_string(attr) -}}.into()", setter(into))]
        {%- elif attr.required is false -%}
            #[builder(default, setter(into))]
        {%- else -%}
            #[builder(setter(into))]
        {%- endif -%}
    {%- endif -%}
{% endmacro %}

{# Determines the appropriate serde attribute for optional fields #}
{% macro get_serde_attribute(attr) %}
    {%- if attr.required is false -%}
        {%- if attr.multiple -%}
            #[serde(default, skip_serializing_if = "Vec::is_empty")]
        {%- else -%}
            #[serde(default, skip_serializing_if = "Option::is_none")]
        {%- endif -%}
    {%- else -%}
        {%- if attr.default or attr.dtypes | length > 1 -%}
            #[serde(default)]
        {%- else -%}
            ///
        {%- endif -%}
    {%- endif -%}
{% endmacro %}

//! This file contains Rust struct definitions with serde serialization.
//! 
//! WARNING: This is an auto-generated file.
//! Do not edit directly - any changes will be overwritten.

use derive_builder::Builder;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};

//
// Type definitions
//
{%- for object in objects %}

{%- if object.name in objects_with_wrapped %}

#[derive(Debug, Default)]
pub struct {{ object.name }} {
   {%- for attr in object.attributes %}
   pub {{ attr.name }}: {{ wrap_type(attr, object.name, object_names, None) }},
   {%- endfor %}
}

impl<'de> Deserialize<'de> for {{ object.name }} {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[derive(Deserialize)]
        #[serde(rename="{{ object.name }}")]
        struct Helper {
            {%- for attr in object.attributes %}
            pub {{ attr.name }}: {{ wrap_type(attr, object.name, object_names, 0) }},
            {%- endfor %}
        }

        {%- for attr in object.attributes %}
        {%- if attr.xml.wrapped %}
        {%- for wrapped in attr.xml.wrapped %}
        #[derive(Deserialize)]
        struct {{ wrapped | cap_first }} {
            {%- if loop.last %}
            pub value: {{ wrap_type(attr, object.name, object_names, None) }}
            {%- else %}
            pub value: {{ wrap_type(attr, object.name, object_names, loop.index) }},
            {%- endif %}
        }
        {%- endfor %}
        {%- endif %}
        {%- endfor %}

        Ok(Self {
            {%- for attr in object.attributes %}
            {{ attr.name }},
            {%- endfor %}
        })
    }
}
{%- else %}

{%- if object.docstring %}
/// {{ wrap(object.docstring, 70, "", "/// ", None) }}
{%- endif %}
#[derive(Debug, Clone, Serialize, Deserialize, JsonSchema, Builder, Default)]
#[allow(non_snake_case)]
pub struct {{ object.name }} {
    {%- for i, attr in object.attributes | enumerate %}
    
    {%- if i == 0 %}
    {%- if attr.docstring%}
    /// {{ wrap(attr.docstring, 70, "", "    /// ", None) }}
    {%- else %}
    /// {{ attr.name }}
    {%- endif %}
    {%- else %}
    {%- if attr.docstring%}

    /// {{ wrap(attr.docstring, 70, "", "    /// ", None) }}
    {%- else %}

    /// {{ attr.name }}
    {%- endif %}
    {%- endif %}
    {{ get_serde_attribute(attr) }}
    {{ get_builder_attribute(attr) }}
    pub {{ attr.name }}: {{ wrap_type(attr, object.name, object_names) }},
    {%- endfor %}
}
{%- endif %}
{% endfor %}

{%- if enums | length > 0 %}
//
// Enum definitions
//
{%- for enum in enums %}
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Serialize, Deserialize, JsonSchema, Default, PartialEq, Eq)]
pub enum {{ enum.name }} {
    {%- for key, value in enum.mappings | dictsort %}
    {% if loop.first %}#[default]{% endif %}
    #[serde(rename = "{{ value }}")]
    {{ key }},
    {%- endfor %}
}
{% endfor %}
{%- endif %}


{%- for object in objects %}
{%- for attr in object.attributes %}
{%- if attr.dtypes | length > 1 %}
/// Union type for {{ object.name }}.{{ attr.name }}
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Serialize, Deserialize, JsonSchema)]
pub enum {{ object.name }}{{ attr.name | capitalize }}Type {
    {%- for dtype in attr.dtypes %}
    {%- if dtype in object_names %}
    Object({{ dtype }}),
    {%- else %}
    {{ convert_basic_type(dtype) | capitalize }}({{ convert_basic_type(dtype) }}),
    {%- endif %}
    {%- endfor %}
}
{%- endif %}
{%- endfor %}
{%- endfor %}