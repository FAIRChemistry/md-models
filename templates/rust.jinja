{# Helper macros #}
{% macro is_multiple(attr) %}
    {%- if attr.multiple -%}Vec<{%- endif -%}
{% endmacro %}

{% macro is_multiple_end(attr) %}
    {%- if attr.multiple -%}>{%- endif -%}
{% endmacro %}

{% macro get_type(attr, parent_name) %}
    {%- if attr.dtypes | length > 1 -%}
    {{ parent_name }}{{ attr.name | capitalize }}Type
    {%- elif attr.dtypes[0] in object_names -%}
    {{ attr.dtypes[0] }}
    {%- elif attr.dtypes[0] == "string" -%}
    String
    {%- elif attr.dtypes[0] == "float" -%}
    f64
    {%- elif attr.dtypes[0] == "integer" -%}
    i64
    {%- elif attr.dtypes[0] == "boolean" -%}
    bool
    {%- else -%}
    {{ attr.dtypes[0] }}
    {%- endif -%}
{% endmacro %}

{% macro wrap_type(attr, parent_name) %}
    {%- if attr.required is false -%}
    Option<{{ is_multiple(attr) }}{{ get_type(attr, parent_name) }}{{ is_multiple_end(attr) }}>
    {%- else -%}
    {{ is_multiple(attr) }}{{ get_type(attr, parent_name) }}{{ is_multiple_end(attr) }}
    {%- endif -%}
{% endmacro %}

//! This file contains Rust struct definitions with serde serialization.
//! 
//! WARNING: This is an auto-generated file.
//! Do not edit directly - any changes will be overwritten.

use serde::{Deserialize, Serialize};
use std::collections::HashMap;

// JSON-LD base types
#[derive(Debug, Default, Clone, Serialize, Deserialize)]
pub struct JsonLdContext(pub HashMap<String, serde_json::Value>);

#[derive(Debug, Default, Clone, Serialize, Deserialize)]
pub struct JsonLd {
    #[serde(rename = "@context", skip_serializing_if = "Option::is_none")]
    pub context: Option<JsonLdContext>,
    #[serde(rename = "@id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "@type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}

//
// {% if title %}{{ title }}{% else %}Model{% endif %} Type definitions
//
{%- for object in objects %}

{%- if object.docstring %}
/// {{ wrap(object.docstring, 70, "", "/// ", None) }}
{%- endif %}
#[derive(Debug, Default, Clone, Serialize, Deserialize)]
pub struct {{ object.name }} {
    #[serde(flatten)]
    pub json_ld: JsonLd,
    {%- for attr in object.attributes %}
    {%- if attr.docstring %}
    /// {{ wrap(attr.docstring, 70, "", "    /// ", None) }}
    {%- endif %}
    {%- if attr.required is false %}
    #[serde(skip_serializing_if = "Option::is_none")]
    {%- endif %}
    pub {{ attr.name }}: {{ wrap_type(attr, object.name) }},
    {%- endfor %}
}
{% endfor %}

{%- if enums | length > 0 %}
//
// {% if title %}{{ title }}{% else %}Model{% endif %} Enum definitions
//
{%- for enum in enums %}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum {{ enum.name }} {
    {%- for key, value in enum.mappings | dictsort %}
    #[serde(rename = "{{ value }}")]
    {{ key }},
    {%- endfor %}
}
{% endfor %}
{%- endif %}

//
// Enum definitions for attributes with multiple types
//
{%- for object in objects %}
{%- for attr in object.attributes %}
{%- if attr.dtypes | length > 1 %}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum {{ object.name }}{{ attr.name | capitalize }}Type {
    {%- for dtype in attr.dtypes %}
    {%- if dtype in object_names %}
    Object({{ dtype }}),
    {%- elif dtype == "string" %}
    String(String),
    {%- elif dtype == "float" %}
    Float(f64),
    {%- elif dtype == "integer" %}
    Integer(i64),
    {%- elif dtype == "boolean" %}
    Boolean(bool),
    {%- else %}
    {{ dtype | capitalize }}({{ dtype }}),
    {%- endif %}
    {%- endfor %}
}
{%- endif %}
{%- endfor %}
{%- endfor %}
